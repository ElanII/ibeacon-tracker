'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _events = require('events');

var _symbol = require('symbol');

var _symbol2 = _interopRequireDefault(_symbol);

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

var PIPES = (0, _symbol2['default'])('PIPES');
var ASSEMBLY = (0, _symbol2['default'])('ASSEMBLY');
var RUNNING = (0, _symbol2['default'])('RUNNING');
var PENDING_CALLBACK = (0, _symbol2['default'])('PENDING_CALLBACK');
var COMPLETE = (0, _symbol2['default'])('COMPLETE');

function Assembly(data) {
    var _this = this;

    var context = { done: false };

    // Terminate the execution if data is `Error` object.
    if (_utils2['default'].isError(data)) {
        this.complete(data);
    }

    this.invoke(data, function (result) {
        if (!context.done) {
            context.done = true;
            _this.next(result);
        }
    }, function (result) {
        if (!context.done) {
            context.done = true;
            _this.complete(result);
        }
    });
}

var Pipeline = (function (_EventEmitter) {
    function Pipeline() {
        _classCallCheck(this, Pipeline);

        _get(Object.getPrototypeOf(Pipeline.prototype), 'constructor', this).call(this);
        this[PIPES] = [];
        this[RUNNING] = false;
        this[PENDING_CALLBACK] = null;
        this[COMPLETE] = _utils2['default'].bindFunc(function Complete(err, data) {
            var error = err;

            if (!err && _utils2['default'].isError(data)) {
                error = data;
            }

            var callback = this[PENDING_CALLBACK];
            var eventName = !error ? 'done' : 'error';
            var eventArgs = error || data;

            this[RUNNING] = false;

            if (_utils2['default'].isFunction(callback)) {
                callback(error, data);
            }

            this.emit(eventName, eventArgs);
        }, this);
    }

    _inherits(Pipeline, _EventEmitter);

    _createClass(Pipeline, [{
        key: 'isRunning',
        get: function () {
            return this[RUNNING];
        }
    }, {
        key: 'pipe',
        value: function pipe(item) {
            if (this[RUNNING]) {
                throw new Error('Pipeline can not be changed during the run.');
            }

            this[PIPES].push(item);
            this[ASSEMBLY] = null;
            return this;
        }
    }, {
        key: 'run',
        value: function run() {
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            if (this[RUNNING]) {
                throw new Error('Tasks already are running');
            }

            var context = args[0];
            var callback = args[1];

            if (_utils2['default'].isFunction(context)) {
                callback = context;
                context = null;
            }

            this[RUNNING] = true;
            this[PENDING_CALLBACK] = callback;

            var onSuccess = _utils2['default'].bindFunc(function onSuccess(data) {
                this[COMPLETE](null, data);
            }, this);

            var onFailure = _utils2['default'].bindFunc(function onFailure(err) {
                this[COMPLETE](err, null);
            }, this);

            if (!this[ASSEMBLY]) {
                var assembly = onSuccess;
                var pipes = this[PIPES];
                var len = pipes.length;
                var i = undefined;

                for (i = len - 1; i >= 0; i -= 1) {
                    var pipe = pipes[i];
                    if (pipe) {
                        assembly = _utils2['default'].bindFunc(Assembly, {
                            invoke: pipe,
                            next: assembly,
                            complete: onSuccess
                        });
                    }
                }

                this[ASSEMBLY] = assembly;
            }

            _utils2['default'].executeAsAsync(_utils2['default'].bindFunc(function Run(sym, ctx, success, failure) {
                try {
                    this[sym](ctx, success);
                } catch (ex) {
                    failure(ex);
                }
            }, this, ASSEMBLY, context, onSuccess, onFailure));

            return this;
        }
    }]);

    return Pipeline;
})(_events.EventEmitter);

exports['default'] = {
    create: function create() {
        return new Pipeline();
    }
};
module.exports = exports['default'];